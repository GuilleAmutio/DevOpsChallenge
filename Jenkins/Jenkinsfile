pipeline {
  agent any

  triggers {
    pollSCM ''
  }

  environment {
    // Angular directory
    angularDir = '/var/jenkins_home/workspace/angular'
    // Src Directory
    srcDir = '/src'
    // Java directory
    javaDir = '/var/jenkins_home/workspace/java/mtsj'

    // Maven global settings configuration ID
    globalSettingsId = 'MavenSettings'
    // Maven tool id
    mavenInstallation = 'Maven3'

    // sonarQube
    // Name of the sonarQube tool
    sonarTool = 'SonarQube'
    // Name of the sonarQube environment
    sonarEnv = "SonarQube"
  }

  stages {
      stage('Iniciando') {
          steps {
              echo 'A commit has been done'
          }
      }
      stage('SonarQube code analysis - Angular') {
        steps {
            script {
                dir(angularDir) {
                    def scannerHome = tool sonarTool
                    def props = readJSON file: 'package.json'
                    withSonarQubeEnv(sonarEnv) {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${props.name} \
                                -Dsonar.projectName=${props.name} \
                                -Dsonar.projectVersion=${props.version} \
                                -Dsonar.sources=${srcDir}
                        """
                    }
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
      }
      stage('SonarQube code analysis - Java') {
        steps {
            script {
                dir(javaDir) {
                    withMaven(globalMavenSettingsConfig: globalSettingsId, maven: mavenInstallation) {
                        withSonarQubeEnv(sonarEnv) {
                            sh "mvn sonar:sonar -Dsonar.dependencyCheck.reportPath=../../dependency-check-report.xml"
                        }
                    }
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
      }
      stage('Publicando') {
          steps {
              echo 'Publicaci√≥n'
          }
      }
  }
}
